// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "postgresql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model JournalRecord {
    id          String   @id
    bodie       String
    date        String
    time        String
    record_name String
    volume      Float
    sign_id     Float
    sign_level  Float
    conclusion  String
    history_id  String?
    phonendoId  String
    recordName  String
    usageDate   DateTime
    recordType  String
    patient     User?    @relation(name: "patient_relation", fields: [patient_id], references: [phonendo_id])
    patient_id  Int?
    doctor      User?    @relation(name: "doctor_relation", fields: [doctor_id], references: [phonendo_id])
    doctor_id   Int?
    ml_result   Float

    @@index([patient_id])
    @@index([doctor_id])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id                      String          @id @default(cuid())
    name                    String?
    email                   String?         @unique
    emailVerified           DateTime?
    image                   String?
    accounts                Account[]
    sessions                Session[]
    role                    Role            @default(PATIENT)
    phonendo_id             Int?
    patient_journal_records JournalRecord[] @relation("patient_relation")
    doctor_joutnal_records  JournalRecord[] @relation("doctor_relation")

    @@unique([phonendo_id])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Role {
    PATIENT
    RELATIVE
    DOCTOR
}
